
TOP         := <vardecl> | <constdecl> | <fndecl> 

comment     := '#' [^\n]+

vardecl     := 'var'   <identifier> '=' <expresion> ';'
constdecl   := 'const' <identifier> '=' <expresion> ';'
fndecl      := 'fn'    <identifier> '(' <params> ')' <block>

identifier  := [a-zA-Z_][a-zA-Z0-9_]+
params      := <identifier> ( ',' <identifier> )*
block       := '{' <statement>+ '}'

statement   := <while_loop> | <conditional> | <vardecl> | <return> | <break> | <continue> | <assignment> | <expression> ';'

while_loop  := 'while' '(' <expresion> ')' <block>
conditional := 'if' '(' <expresion> ')' <block> ( 'else' <block> )?
return      := 'return' <expression>? ';'
break       := 'break' ';'
continue    := 'continue' ';'
assignment  := <expression> '=' <expression> ';'

expression  := <binary_op>

binary_op   := <prefix_op> ( <binary_sig> <prefix_op> )*
binary_sig  := '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '>' | '<' | '>=' | '<=' | '==' | '!=' | 'and' | 'or' 

prefix_op   := ( '-' | '~' | '!' | '&' | '<<' | '>>' | '>>>' )+ <suffix_op>

suffix_op   := <atom> '(' <params> ')' | <atom> '[' <expression> ']' | <atom> '@' <number> |  <atom> '@' <paren_expr> | <atom>

atom        := <identifier> | <number> | <string> | <byte_array> | <word_array> | <paren_expr>

paren_expr  := '(' <expression> ')'

string      := '"' ( [^\\] | '\\' [.])* '"'
byte_array  := '{' <expression> ( ',' <expression> )* '}'
word_array  := '[' <expression> ( ',' <expression> )* ']'

number      := [0-9]+
